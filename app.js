// buffoon_bot

const TelegramBot = require('node-telegram-bot-api');
const sqlite = require('sqlite-sync');
// const mtproto = require('telegram-mtproto');
const cfg = require('./config.json');
const token = cfg.token;
const bot = new TelegramBot(token, {polling: true});


sqlite.connect('library.db');
sqlite.run("CREATE TABLE IF NOT EXISTS users(id INTEGER PRIMARY KEY AUTOINCREMENT, chat_id INTEGER NOT NULL, user_id INTEGER NOT NULL UNIQUE, user_name TEXT NOT NULL, user_nick TEXT UNIQUE, coins_value INTEGER NOT NULL, warns INTEGER NOT NULL)",
    function (res) {
        if (res.error)
            throw res.error;
        // console.log('users ' + res);
    });
sqlite.run("CREATE TABLE IF NOT EXISTS titles(id INTEGER PRIMARY KEY AUTOINCREMENT, chat_id INTEGER NOT NULL, user_id INTEGER NOT NULL, user_name TEXT NOT NULL, title TEXT NOT NULL UNIQUE, date TEXT NOT NULL)",
    function (res) {
        if (res.error)
            throw res.error;
        // console.log('titles ' + res);
    });
sqlite.run("CREATE TABLE IF NOT EXISTS messages(id INTEGER PRIMARY KEY AUTOINCREMENT, key TEXT NOT NULL UNIQUE, from_id INTEGER NOT NULL, user_id INTEGER NOT NULL, message_id INTEGER NOT NULL)",
    function (res) {
        if (res.error)
            throw res.error;
        // console.log('messages ' + res);
    });
sqlite.run("CREATE TABLE IF NOT EXISTS times(id INTEGER PRIMARY KEY AUTOINCREMENT, chat_id INTEGET NOT NULL UNIQUE, title_time INTEGER, couple_time INTEGER)",
    function (res) {
        if (res.error)
            throw res.error;
        // console.log('times ' + res);
    });

var addMode = {};

// <a href="tg://user?id=123456789">Name</a>

/**
 * /add key
 */
bot.onText(/\/add (.+)/gi, function (msg, match) {
    var userId = msg.from.id;
    var chatId = msg.chat.id;
    var key = match[1];
    var text;
    addMode.chatId = {
        key,
        from: chatId,
        user: userId,
    };

    if (isMessageExists(key)) {
        text = '–¢–∞–∫–æ–π –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
    } else {
        text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã';
    }

    bot.sendMessage(chatId, text);
});
/**
 * /get key
 */
bot.onText(/\/get (.+)/gi, function (msg, match) {
    var chatId = msg.chat.id;
    var key = match[1];
    var message = getMessage(key);

    if (message.exists) {
        bot.forwardMessage(chatId, message.from_id, message.message_id);
    }
});
/**
 * remove key
 */
bot.onText(/\/remove (.+)/gi, function (msg, match) {
    var chatId = msg.chat.id;
    var key = match[1];
    var message = getMessage(key);

    if (!message.exists) return;
    if (message.from_id != msg.chat.id) return;

    sqlite.delete('messages', {"key": key}, function () {
        bot.sendMessage(chatId, '–ó–Ω–∞—á–µ–Ω–∏–µ ' + key + ' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω–æ');
    });
});
/**
 * /list
 */
bot.onText(/\/list/gi, function (msg) {
    var userId = msg.from.id;
    var chatId = msg.chat.id;
    var data = sqlite.run("SELECT `key` FROM messages WHERE `user_id` = ?", [userId]);

    if (data.length == 0) {
        bot.sendMessage(chatId, '–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        return;
    }

    var lines = [];
    data.forEach(function (element) {
        lines.push('`' + element.key + '`');
    });
    bot.sendMessage(chatId, lines.join(', '), {parse_mode: 'markdown'});
});

// Bot commands
/**
 * /start
 */
bot.onText(/\/start/gi, function (msg) {
    var userId = msg.from.id;
    var userName = msg.from.first_name;
    var userNick;
    var chatId = msg.chat.id;

    if (!isUserExists(userId)) {
        if ('username' in msg.from) {
            userNick = msg.from.username;
        }

        addUser(userId, userName, chatId, userNick);
    }

    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç <a href="tg://user?id=' + userId + '">' + userName + '</a>', {parse_mode: 'html'});
});
/**
 * /admins
 */
bot.onText(/\/admins|^–∞–¥–º–∏–Ω—ã/gi, function (msg) {
    if (msg.chat.type !== 'private') {
        var chatId = msg.chat.id;

        callAdmins(chatId);
    }
});
/**
 * /balance
 */
bot.onText(/\/balance|^–±–∞–ª–∞–Ω—Å$|^–±$/gi, function (msg) {
    var userId = msg.from.id;
    var userName = msg.from.first_name;
    var chatId = msg.chat.id;
    var data_coins = sqlite.run("SELECT coins_value FROM users WHERE user_id = ?", [userId])[0].coins_value;
    var textMsg = userName + ', –Ω–∞ —Ç–≤–æ—ë–º —Å—á–µ—Ç—É:\nüí∞' + data_coins + 'üí∞';
    console.log('/balance');

    bot.sendMessage(chatId, textMsg);
});
/**
 * /chat_title
 */
bot.onText(/\/chat_title (.+)/gi, function (msg, match) {
    var userId = msg.from.id;
    var userName = msg.from.first_name;
    var chatId = msg.chat.id;
    var text = match[1];

    bot.getChatMember(chatId, userId).then(function (data) {
        let status = data.status;

        if (status === 'creator' || status === 'administrator') {
            bot.setChatTitle(chatId, text);
        } else {
            bot.sendMessage(chatId, '<a href="tg://user?id=' + userId + '">' + userName + '</a>, —Ç—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', {parse_mode: 'html'});
        }
    });
});

// Listener messages
bot.on('message', function (msg) {
    var userId = msg.from.id;
    var userName = msg.from.first_name;
    var userNick;
    var chatId = msg.chat.id;
    var chatTitle = msg.chat.title;
    var row = addMode.chatId;

    if (!isUserExists(userId)) {
        if ("username" in msg.from) {
            userNick = msg.from.username;
            console.log(userNick);
        }
        addUser(userId, userName, chatId, userNick);
    }
    if ('new_chat_participant' in msg) {
        var newUserId = msg.new_chat_participant.id;
        var newUserName = msg.new_chat_participant.first_name;
        var newUserNick = msg.new_chat_participant.username;

        if (!isUserExists(newUserId)) {
            if ("username" in msg.from) {
                userNick = msg.from.username;
                console.log(newUserNick);
            }
            addUser(newUserId, newUserName, chatId, userNick);
        }

        bot.getChatAdministrators(chatId).then(function (data) {
            var creatorId;

            data.forEach(function (i) {
                if (i.status === 'creator') {
                    creatorId = i.user.id;
                }
            });

            bot.sendMessage(creatorId, 'üëçüèª –í —á–∞—Ç ' + chatTitle + ' –≤–æ—à—ë–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id=' + newUserId + '">' + newUserName + '</a> üëçüèª', {parse_mode: 'html'});
        });
        bot.sendMessage(chatId, 'üôÇ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <a href="tg://user?id=' + newUserId + '">' + newUserName + '</a> üôÇ', {parse_mode: 'html'});
    }
    if ('left_chat_participant' in msg) {
        var leftUserId = msg.left_chat_participant.id;
        var leftUserName = msg.left_chat_participant.first_name;
        // var leftUserNick = msg.left_chat_participant.username;

        bot.getChatAdministrators(chatId).then(function (data) {
            var creatorId;

            data.forEach(function (i) {
                if (i.status == 'creator') {
                    creatorId = i.user.id;
                }
            });

            bot.sendMessage(creatorId, 'üëéüèª –ò–∑ —á–∞—Ç–∞ ' + chatTitle + ' –≤—ã—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id=' + leftUserId + '">' + leftUserName + '</a> üëéüèª', {parse_mode: 'html'});
        });
        bot.sendMessage(chatId, 'üôÅ –ü—Ä–æ—â–∞–π <a href="tg://user?id=' + leftUserId + '">' + leftUserName + '</a> üôÅ', {parse_mode: 'html'});
    }

    if (typeof(msg.text) !== 'undefined' && (msg.text.toLowerCase() === '/cancel' || msg.text.toLowerCase() === '/cancel@bb_funny_bot')) {
        delete addMode.chatId;
        return;
    }
    if ("chatId" in addMode) {
        sqlite.insert("messages", {key: row.key, from_id: row.from, user_id: row.user, message_id: msg.message_id}, function (res) {
            var text;
            if (res.error) {
                text = '–î–æ–±–∞–≤–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å';
                throw res.error;
            } else {
                text = '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ';
            }
            bot.sendMessage(chatId, text);
            delete addMode.chatId;
        });
    }
    else {
        return;
    }
});

// –¢–∏—Ç—É–ª –¥–Ω—è (–ì–û–¢–û–í–û)
bot.onText(/^!(.+) –¥–Ω—è$/gi, function (msg, match) {
    var chatId = msg.chat.id;
    var text = match[1];
    var usersChat = sqlite.run("SELECT * FROM users WHERE `chat_id` = ?", [chatId]);
    var random = Math.round(Math.random() * usersChat.length - 1);
    var rndUserId = usersChat[random].user_id;
    var rndUserName = usersChat[random].user_name;
    var noteTime = sqlite.run("SELECT `title_time` FROM times WHERE `chat_id` = ? ", [chatId]);
    var time = Date.now();
    var date = new Date().getDate() + '.' + (new Date().getMonth() + 1) + '.' + new Date().getFullYear();

    if (text === '–ø–∞—Ä–∞') return false;

    if (noteTime.length) {
        var prevTime = noteTime[0].title_time;

        if ((prevTime + 3600000) <= time) {
            sqlite.insert("titles", {chat_id: chatId, user_id: rndUserId, user_name: rndUserName, title: text, date: date});
            sqlite.run("UPDATE times SET `title_time` = ? WHERE `chat_id` = ?", [time, chatId]);
            bot.sendMessage(chatId, text + ' –¥–Ω—è —É –Ω–∞—Å <a href="tg://user?id=' + rndUserId + '">' + rndUserName + '</a>', {parse_mode: 'html'});
        }
        else {
            bot.sendMessage(chatId, 'ü§ñ–í—ã–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª –¥–Ω—è –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —á–∞—Åü§ñ');
        }
    }
    else {
        sqlite.insert("times", {chat_id: chatId, title_time: time});
        sqlite.insert("titles", {chat_id: chatId, user_id: rndUserId, user_name: rndUserName, title: text, date: date});
        bot.sendMessage(chatId, text + ' –¥–Ω—è —É –Ω–∞—Å <a href="tg://user?id=' + rndUserId + '">' + rndUserName + '</a>', {parse_mode: 'html'});
    }
});
// –°–ø–∏—Å–æ–∫ —Ç–∏—Ç—É–ª–æ–≤ –¥–Ω—è (–ì–û–¢–û–í–û)
bot.onText(/\/titles|^!—Ç–∏—Ç—É–ª—ã/gi, function (msg) {
    var chatId = msg.chat.id;
    var date = new Date().getDate() + '.' + (new Date().getMonth() + 1) + '.' + new Date().getFullYear();
    var titlesData = sqlite.run("SELECT * FROM titles WHERE `chat_id` = ?", [chatId]);
    var titlesList = [];
    console.log('–°–ø–∏—Å–æ–∫ —Ç–∏—Ç—É–ª–æ–≤');

    titlesData.forEach(function (item) {
        if (item.date == date) {
            titlesList.push('üë§' + item.user_name + ' - ' + item.title + ' –¥–Ω—èüëë');
        }
    });

    bot.sendMessage(chatId, 'ü§ñ<b>–¢–∏—Ç—É–ª—ã –¥–Ω—è</b>ü§ñ\n\n' + titlesList.join('\n'), {parse_mode: 'html'});
});
// –û—Ç–¥–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏ (–ì–û–¢–û–í–û)
bot.onText(/^\+(\d+)$/, function (msg, match) {
    if ("reply_to_message" in msg) {
        var userId = msg.from.id;
        var userName = msg.from.first_name;
        var chatId = msg.chat.id;
        var coinsVal = Number(match[1]);
        var userCoins = Number(sqlite.run("SELECT `coins_value` FROM users WHERE `user_id` = ?", [userId])[0].coins_value);
        var result;
        var replyId = msg.reply_to_message.from.id;
        var replyName = msg.reply_to_message.from.first_name;
        var replyCoins = Number(sqlite.run("SELECT `coins_value` FROM users WHERE `user_id` = ?", [replyId])[0].coins_value);

        if (userId == replyId) {
            return;
        }

        if (userCoins < coinsVal) {
            bot.sendMessage(chatId, userName + ', –Ω–µ–ª—å–∑—è –æ—Ç–¥–∞—Ç—å –±–æ–ª—å—à–µ —á–µ–º –∏–º–µ–µ—à—å‚òùüèª');
            return;
        }
        else {
            result = userCoins - coinsVal;
            sqlite.run("UPDATE users SET `coins_value` = ? WHERE `user_id` = ?", [result, userId]);
        }

        result = replyCoins + coinsVal;
        sqlite.run("UPDATE users SET `coins_value` = ? WHERE `user_id` = ?", [result, replyId]);

        bot.sendMessage(chatId, userName + ' –æ—Ç–¥–∞–ª üí∞' + coinsVal + 'üí∞\n' + replyName + ' –∏—Ç–æ–≥–æ —É —Ç–µ–±—è üí∞' + result + 'üí∞', {parse_mode: 'html'});
    }
});
bot.onText(/^\+$|^—Å–ø–∞—Å–∏–±–æ$/, function (msg) {
    if ("reply_to_message" in msg) {
        var userId = msg.from.id;
        var userName = msg.from.first_name;
        var chatId = msg.chat.id;
        var userCoins = Number(sqlite.run("SELECT `coins_value` FROM users WHERE `user_id` = ?", [userId])[0].coins_value);
        var replyId = msg.reply_to_message.from.id;
        var replyName = msg.reply_to_message.from.first_name;
        var replyCoins = Number(sqlite.run("SELECT `coins_value` FROM users WHERE `user_id` = ?", [replyId])[0].coins_value);
        var result;

        if (userId == replyId) {
            return;
        }
        else if (userCoins <= 0) {
            bot.sendMessage(chatId, userName + ', –Ω–µ–ª—å–∑—è –æ—Ç–¥–∞—Ç—å –±–æ–ª—å—à–µ —á–µ–º –∏–º–µ–µ—à—å‚òùüèª');
            return;
        }
        else {
            result = userCoins - 1;
            sqlite.run("UPDATE users SET `coins_value` = ? WHERE `user_id` = ?", [result, userId]);
        }

        result = replyCoins + 1;
        sqlite.run("UPDATE users SET `coins_value` = ? WHERE `user_id` = ?", [result, replyId]);
        bot.sendMessage(chatId, userName + ' –ø–æ–¥–µ–ª–∏–ª—Å—è –º–æ–Ω–µ—Ç–∫–æ–π üí∞1üí∞\n' + replyName + ' —É —Ç–µ–±—è üí∞' + result + 'üí∞', {parse_mode: 'html'});
    }
});
// –û—Ç–Ω—è—Ç—å –º–æ–Ω–µ—Ç–∫–∏ (–ì–û–¢–û–í–û)
bot.onText(/^-(\d+)$/, function (msg, match) {
    if ("reply_to_message" in msg) {
        var userId = msg.from.id;
        var userName = msg.from.first_name;
        var userCoins = Number(sqlite.run("SELECT `coins_value` FROM users WHERE `user_id` = ?", [userId])[0].coins_value);
        var chatId = msg.chat.id;
        var coinsVal = Number(match[1]);
        var replyId = msg.reply_to_message.from.id;
        var replyName = msg.reply_to_message.from.first_name;
        var replyCoins = Number(sqlite.run("SELECT `coins_value` FROM users WHERE `user_id` = ?", [replyId])[0].coins_value);
        var chance = randomTo(10);
        var stolenCoins = randomTo(coinsVal);
        var resultMinus;
        var resultPlus;
        var text = '';

        if (userId == replyId) {
            return;
        }

        if (replyId == +cfg.creator_id) {
            bot.sendMessage(chatId, userName + ' –Ω–µ —Å–º–æ–≥ –æ—Ç–Ω—è—Ç—å üí∞–º–æ–Ω–µ—Ç—ãüí∞ —É ' + replyName);
            return;
        }

        if (Math.floor(replyCoins / 2) < coinsVal) {
            bot.sendMessage(chatId, userName + ', –Ω–µ–ª—å–∑—è –æ—Ç–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ 50%');
            return;
        }
        else if (chance > Math.floor(10 / 3)) {
            resultMinus = replyCoins - stolenCoins;
            resultPlus = userCoins + stolenCoins;
            sqlite.run("UPDATE users SET `coins_value` = ? WHERE `user_id` = ?", [resultMinus, replyId]);
            sqlite.run("UPDATE users SET `coins_value` = ? WHERE `user_id` = ?", [resultPlus, userId]);
            text = userName + ' –æ—Ç–Ω—è–ª üí∞' + stolenCoins + 'üí∞\n' + replyName + ' —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å üí∞' + resultMinus + 'üí∞';
        }
        else {
            text = userName + ' –Ω–µ —Å–º–æ–≥ –æ—Ç–Ω—è—Ç—å üí∞–º–æ–Ω–µ—Ç—ãüí∞ —É ' + replyName;
        }
        bot.sendMessage(chatId, text);
    }
});
// –†–æ–∑—ã–≥—Ä—ã—à –º–æ–Ω–µ—Ç–æ–∫ (–í –ü–†–û–¶–ï–°–°–ï)
bot.onText(/^!—Ä–æ–∑—ã–≥—Ä—ã—à (\d+)$/gi, function (msg, match) {
    var userId = msg.from.id;
    var chatId = msg.chat.id;
    var prize = Number(match[1]);
    var buttons = {
        reply_markup: {
            inline_keyboard: options.raffleStart.buttons
        }
    }
    console.log(userId, chatId, prize);
    // –°–î–ï–õ–ê–¢–¨ –ó–ê–ü–ò–°–¨ –ù–ê –£–ß–ê–°–¢–ò–ï –í –†–û–ó–´–ì–†–´–®–ï –° –ö–ù–û–ü–ö–ê–ú–ò
    // –ü–ï–†–ï–ó–ê–ü–ò–°–´–í–ê–Æ–©–ï–ï–°–Ø –°–û–û–ë–©–ï–ù–ò–ï

    bot.sendMessage(chatId, '–†–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è ' + prize + ' –º–æ–Ω–µ—Ç', buttons);
});
// –ú—É—Ç –∑–∞ –º–æ–Ω–µ—Ç–∫–∏ (–ì–û–¢–û–í–û)
bot.onText(/^!–º—É—Ç$/gi, function (msg) {
    if ("reply_to_message" in msg) {
        var userId = msg.from.id;
        var userName = msg.from.first_name;
        var chatId = msg.chat.id;
        var userCoins = Number(sqlite.run("SELECT `coins_value` FROM users WHERE `user_id` = ?", [userId])[0].coins_value);
        var replyId = msg.reply_to_message.from.id;
        var replyName = msg.reply_to_message.from.first_name;
        var time = msg.date + (0.55 * 60);
        var result = userCoins - 50;
        var textMsg = '';

        console.log('–º—É—Ç –∑–∞ –º–æ–Ω–µ—Ç–∫–∏');

        // if (userId == replyId) return

        bot.getChatMember(chatId, replyId).then(function (data) {
            let status = data.status;

            if (status === 'administrator' || status === 'creator') {
                textMsg = 'ü§ñ–ù–µ–ª—å–∑—è –¥–∞—Ç—å –º—É—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Éü§ñ';
                // console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –¥–∞—Ç—å –º—É—Ç –ê–î–ú–ò–ù–£');
            }
            else if (status === 'restricted') {
                textMsg = replyName + ' —É–∂–µ –º–æ–ª—á–∏—Çüôä';
                // console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –º–æ–ª—á–∏—Ç');
            }
            else if (userId === +cfg.creator_id) {
                textMsg = replyName + ', –ø–æ–ª—É—á–∏–ª(–∞) –º—É—Çüôä';
                bot.restrictChatMember(chatId, replyId, {can_send_message: false, until_date: time});
                // console.log('–°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞—Ç–∫–Ω—É–ª –Ω–∞–≥–ª–µ—Ü–∞');
            }
            else if (userCoins >= 50 && randomTo(10) > 10 / 3) {
                textMsg = replyName + ', –ø–æ–ª—É—á–∏–ª(–∞) –º—É—Çüôä';
                bot.restrictChatMember(chatId, replyId, {can_send_message: false, until_date: time});
                sqlite.run("UPDATE users SET `coins_value` = ? WHERE `user_id` = ?", [result, userId]);
                // console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –º—É—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
            }
            else {
                textMsg = userName + ', –Ω–µ —Å–º–æ–≥ –∑–∞—Ç–∫–Ω—É—Ç—å ' + replyName + 'üòã';
                // console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —Å–º–æ–≥ –¥–∞—Ç—å –º—É—Ç');
            }

            bot.sendMessage(chatId, textMsg);
        });
    }
});
// –ú—É—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–ì–û–¢–û–í–û)
bot.onText(/^!!–º—É—Ç (\d+)$/gi, function (msg, match) {
    if ("reply_to_message" in msg) {
        let userId = msg.from.id;
        let chatId = msg.chat.id;
        let replyId = msg.reply_to_message.from.id;
        let replyName = msg.reply_to_message.from.first_name;
        let value = Number(match[1]);
        let time = msg.date + (value * 60);
        let textMsg = '';
        let minutes = value === 1 ? ' –º–∏–Ω—É—Ç—É' : value > 4 ? ' –º–∏–Ω—É—Ç' : ' –º–∏–Ω—É—Ç—ã';

        bot.getChatMember(chatId, userId).then(function (data) {
            let status = data.status;
            if (status === 'creator' || status === 'administrator') {
                textMsg = replyName + ', –ø–æ–ª—É—á–∏–ª(–∞) –º—É—Ç –Ω–∞ ' + value + minutes + 'üôä';
                bot.restrictChatMember(chatId, replyId, {can_send_message: false, until_date: time});
                bot.sendMessage(chatId, textMsg);
                console.log('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–ª –º—É—Ç –Ω–∞ ' + value + minutes);
            } else return false;
        });
    }
});
// –ü–∞—Ä–∞ –¥–Ω—è (–ì–û–¢–û–í–û)
bot.onText(/^!–ø–∞—Ä–∞$/gi, function (msg) {
    var chatId = msg.chat.id;
    var noteTime = sqlite.run("SELECT `couple_time` FROM times WHERE chat_id = ? ", [chatId]);
    var users = sqlite.run("SELECT * FROM users WHERE `chat_id` = ?", [chatId]);
    var user1 = users[randomTo(users.length)];
    var user2 = users[randomTo(users.length)];
    var time = Date.now();

    if (noteTime.length) {
        var prevTime = noteTime[0].couple_time;

        if ((prevTime + 3600000) <= time) {
            sqlite.run("UPDATE times SET `couple_time` = ? WHERE `chat_id` = ?", [time, chatId]);
            bot.sendMessage(chatId, 'ü§ñ–ü–∞—Ä–∞ –¥–Ω—èü§ñ\n\nüåö<a href="tg://user?id=' + user1.user_id + '">' + user1.user_name + '</a>üåù\n‚ù§üëÜüèª‚ù§üëáüèª‚ù§\nüåö<a href="tg://user?id=' + user2.user_id + '">' + user2.user_name + '</a>üåù', {parse_mode: 'html'});
        }
        else {
            bot.sendMessage(chatId, 'ü§ñ–í—ã–±—Ä–∞—Ç—å –ø–∞—Ä—É –¥–Ω—è –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —á–∞—Åü§ñ');
        }
    }
    else {
        sqlite.insert("times", {chat_id: chatId, couple_time: time});
        bot.sendMessage(chatId, 'ü§ñ–ü–∞—Ä–∞ –¥–Ω—èü§ñ\n\nüåö<a href="tg://user?id=' + user1.user_id + '">' + user1.user_name + '</a>üåù\n‚ù§üëÜüèª‚ù§üëáüèª‚ù§\nüåö<a href="tg://user?id=' + user2.user_id + '">' + user2.user_name + '</a>üåù', {parse_mode: 'html'});
    }
});

/* ******************************************** */

// –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
bot.onText(/^!—Ä$/gi, function (msg) {
    var chatId = msg.chat.id;
    var num;
    // var random = Math.floor((Math.random() * 10) + 1);
    /*
        for (var i = 0; i <= 5; i++) {
            bot.sendMessage(chatId, randomTo(12));
        }
    */

    var random = setInterval(function () {
        num = randomTo(12);
        console.log(num);
        bot.sendMessage(chatId, num);
    }, 1000);
    setTimeout(function () {
        console.log('interval is clear');
        clearInterval(random);
    }, 5500);


    // bot.sendMessage(chatId, randomTo(12));
});
// –ø–µ–Ω—Ç–∞–≥—Ä–∞–º–º–∞
bot.onText(/^!(–ø–µ–Ω—Ç–∞–≥—Ä–∞–º–º–∞)$/gi, function (msg) {
    var userId = msg.from.id;
    var whiteUser = 414108177;
    var chatId = msg.chat.id;
    var stick = 'CAACAgIAAx0CVDUeagACCEpejnCzJitQCQkv6prUYsH7LO0-ygACMAADEcquGJqJ0BWxB0duGAQ';

    if (userId === whiteUser || userId === +cfg.creator_id) bot.sendSticker(chatId, stick);
});

var options = {
    testBtn: {
        reply_markup: JSON.stringify({
            inline_keyboard: [
                [{text: '–¢–∏—Ç—É–ª –¥–Ω—è', callback_data: '—Ç–∏—Ç—É–ª'}],
                [{text: '–ü–∞—Ä–∞ –¥–Ω—è', callback_data: '–ø–∞—Ä–∞'}],
                [{text: '–ü–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', callback_data: '–∞–¥–º–∏–Ω—ã'}]
            ]
        })
    },
    raffleStart: {
        text: '–ß—Ç–æ –±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É',
        buttons: [
            [{text: '–£—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ', callback_data: '—Ä–æ–∑—ã–≥—Ä—ã—à'}]
        ]
    }
};

bot.onText(/\/test/gi, function (msg) {
    let userId = msg.from.id;
    let chatId = msg.chat.id;
    console.log('/test');
    console.groupCollapsed();

    // bot.sendDice(chatId);
    // bot.sendMessage(chatId, '–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞üé≤', options.testBtn);

    console.log(msg);

    bot.getMe(chatId).then(function (data) {
        console.log(data);
        console.group();
    });
    bot.getChatMember(chatId, userId).then(function (data) {
        console.log('\n');
        console.log(data);
        console.group();
    });
    bot.getChat(chatId).then(function (data) {
        console.log('\n');
        console.log(data);
        console.groupEnd();
        console.groupEnd();
    });

    userUpdate(userId);
});
bot.on('callback_query', function (msg) {
    var chatId = msg.message.chat.id;
    var data = msg.data;

    if (data === '—Ç–∏—Ç—É–ª') {
        console.log('data: ' + data);
        var getTitles = sqlite.run("SELECT `title` FROM titles");
        var title = getTitles[randomTo(getTitles.length)].title;
        var getUsers = sqlite.run("SELECT * FROM users WHERE `chat_id` = ?", [chatId]);
        var randomUser = getUsers[randomTo(getUsers.length)];
        var randomUser_id = randomUser.user_id;
        var randomUser_name = randomUser.user_name;

        bot.sendMessage(chatId, title + ' –¥–Ω—è - ' + randomUser_name);
        // bot.sendMessage(chatId, title + ' –¥–Ω—è - <a href="tg://user?id=' + randomUser_id + '">' + randomUser_name + '</a>', {parse_mode: 'html'});
    }
    else if (data === '–ø–∞—Ä–∞') {
        console.log('data: ' + data);
    }
    else if (data === '–∞–¥–º–∏–Ω—ã') {
        console.log('data: ' + data);

        callAdmins(chatId);
    }
    else if (data === '—Ä–æ–∑—ã–≥—Ä—ã—à') {
        console.log('data: ' + data);
    }
});

// Functions
function isUserExists(uId) {
    return sqlite.run("SELECT COUNT(*) as cnt FROM users WHERE `user_id` = ?", [uId])[0].cnt != 0;
}

function isMessageExists(key) {
    return sqlite.run("SELECT COUNT(*) as cnt FROM messages WHERE `key` = ?", [key])[0].cnt != 0;
}

function getMessage(key) {
    const data = sqlite.run("SELECT * FROM messages WHERE `key` = ? LIMIT 1", [key]);

    if (data.length == 0) {
        return {exists: false};
    }
    data[0].exists = true;
    return data[0];
}

function randomTo(n) {
    return Math.floor(Math.random() * n);
}

function callAdmins(cId) {
    bot.getChatAdministrators(cId).then(function (data) {
        var admins = [];

        data.forEach(function (elem) {
            admins.push('<a href="tg://user?id=' + elem.user.id + '">' + elem.user.first_name + '</a>');
        });

        bot.sendMessage(cId, admins.join(', '), {parse_mode: 'html'});
    });
}

function addUser(uId, uName, cId) {
    console.log('New user - ' + uName + ' - ' + arguments["3"]);
    sqlite.insert("users", {user_id: uId, user_name: uName, user_nick: arguments["3"], chat_id: cId, coins_value: 1000, warns: 0}, function (res) {
        if (res.error) {
            throw res.error;
        }
    });
}

function isChat(cId) {

}

function userUpdate(uId) {
    var user = sqlite.run("SELECT * FROM users WHERE `user_id` = ?", [uId]);

    console.log(user);
}